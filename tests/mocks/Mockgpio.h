/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKGPIO_H
#define _MOCKGPIO_H

#include "unity.h"
#include "gpio.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockgpio_Init(void);
void Mockgpio_Destroy(void);
void Mockgpio_Verify(void);




#define MX_GPIO_Init_Ignore() MX_GPIO_Init_CMockIgnore()
void MX_GPIO_Init_CMockIgnore(void);
#define MX_GPIO_Init_StopIgnore() MX_GPIO_Init_CMockStopIgnore()
void MX_GPIO_Init_CMockStopIgnore(void);
#define MX_GPIO_Init_Expect() MX_GPIO_Init_CMockExpect(__LINE__)
void MX_GPIO_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
#define gpio_led_set_state_Ignore() gpio_led_set_state_CMockIgnore()
void gpio_led_set_state_CMockIgnore(void);
#define gpio_led_set_state_StopIgnore() gpio_led_set_state_CMockStopIgnore()
void gpio_led_set_state_CMockStopIgnore(void);
#define gpio_led_set_state_Expect(state) gpio_led_set_state_CMockExpect(__LINE__, state)
void gpio_led_set_state_CMockExpect(UNITY_LINE_TYPE cmock_line, LedStatus state);
#define gpio_led_toggle_state_Ignore() gpio_led_toggle_state_CMockIgnore()
void gpio_led_toggle_state_CMockIgnore(void);
#define gpio_led_toggle_state_StopIgnore() gpio_led_toggle_state_CMockStopIgnore()
void gpio_led_toggle_state_CMockStopIgnore(void);
#define gpio_led_toggle_state_Expect() gpio_led_toggle_state_CMockExpect(__LINE__)
void gpio_led_toggle_state_CMockExpect(UNITY_LINE_TYPE cmock_line);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
