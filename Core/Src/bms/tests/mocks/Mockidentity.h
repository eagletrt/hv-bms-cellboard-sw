/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKIDENTITY_H
#define _MOCKIDENTITY_H

#include "unity.h"
#include "identity.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void Mockidentity_Init(void);
void Mockidentity_Destroy(void);
void Mockidentity_Verify(void);




#define identity_init_Expect(id) identity_init_CMockExpect(__LINE__, id)
void identity_init_CMockExpect(UNITY_LINE_TYPE cmock_line, CellboardId id);
#define identity_get_cellboard_id_ExpectAndReturn(cmock_retval) identity_get_cellboard_id_CMockExpectAndReturn(__LINE__, cmock_retval)
void identity_get_cellboard_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, CellboardId cmock_to_return);
#define identity_get_build_time_ExpectAndReturn(cmock_retval) identity_get_build_time_CMockExpectAndReturn(__LINE__, cmock_retval)
void identity_get_build_time_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, milliseconds_t cmock_to_return);
#define identity_get_string_build_time_ExpectAndReturn(cmock_retval) identity_get_string_build_time_CMockExpectAndReturn(__LINE__, cmock_retval)
void identity_get_string_build_time_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define identity_get_can_payload_ExpectAndReturn(byte_size, cmock_retval) identity_get_can_payload_CMockExpectAndReturn(__LINE__, byte_size, cmock_retval)
void identity_get_can_payload_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t* byte_size, bms_cellboard_version_converted_t* cmock_to_return);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
