/******************************************************************************
Finite State Machine
Project: cellboard_bms_monitor_fsm
Description: Cellboard FSM that handles all the operations of the BMS monitor

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.5.4
Generation date: 2024-07-16 21:53:06 +0200
Generated from: bms-monitor-fsm.dot
The finite state machine has:
  9 states
  0 transition functions
Functions and types have been generated with prefix "bms_monitor_fsm_"
******************************************************************************/

#ifndef BMS_MONITOR_FSM_H
#define BMS_MONITOR_FSM_H
#include <stdlib.h>
#include <stdbool.h>

/*** USER CODE BEGIN MACROS ***/
#include "cellboard-def.h"
#include "cellboard-conf.h"

#include "bms-manager.h"

/**
 * @brief Type definition of the possible event types
 *
 * @details
 *     - BMS_MONITOR_FSM_EVENT_TYPE_READ_VOLTAGES Start the voltage reading procedure
 *     - BMS_MONITOR_FSM_EVENT_TYPE_READ_TEMPERATURES Start the tmperature reading procedure
 *     - BMS_MONITOR_FSM_EVENT_TYPE_IGNORED Message that should be ignored (used for initialization)
 */
typedef enum {
    BMS_MONITOR_FSM_EVENT_TYPE_READ_VOLTAGES,
    BMS_MONITOR_FSM_EVENT_TYPE_READ_TEMPERATURES,
    BMS_MONITOR_FSM_EVENT_TYPE_COUNT,
    BMS_MONITOR_FSM_EVENT_TYPE_IGNORED
} BmsMonitorFsmEventType;
/*** USER CODE END MACROS ***/

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
/*** USER STATE DATA TYPE BEGIN ***/
typedef void bms_monitor_fsm_state_data_t;
/*** USER STATE DATA TYPE END ***/
// Event data object
// By default the struct is empty; put the data of the event inside
// the structure if you need or leave it empty
typedef struct {
  
  /*** USER CODE BEGIN EVENT_DATA ***/
  BmsMonitorFsmEventType type;
  /*** USER CODE END EVENT_DATA ***/

} bms_monitor_fsm_event_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  BMS_MONITOR_FSM_STATE_INIT = 0,  
  BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_READ_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_START_VOLT_CONVERSION,  
  BMS_MONITOR_FSM_STATE_START_TEMP_CONVERSION,  
  BMS_MONITOR_FSM_STATE_POLL_VOLT_STATUS,  
  BMS_MONITOR_FSM_STATE_READ_VOLTAGE,  
  BMS_MONITOR_FSM_STATE_POLL_TEMP_STATUS,  
  BMS_MONITOR_FSM_STATE_READ_TEMPERATURE,  
  BMS_MONITOR_FSM_NUM_STATES,
  BMS_MONITOR_FSM_NO_CHANGE
} bms_monitor_fsm_state_t;

// State human-readable names
extern const char *bms_monitor_fsm_state_names[];

// State function prototype
typedef bms_monitor_fsm_state_t bms_monitor_fsm_state_func_t(bms_monitor_fsm_state_data_t *data);

/*** USER CODE BEGIN TYPES ***/
/**
 * @brief Type definition for the BMS monitor structure handler
 *
 * @attention This structure should not be used outside of this module
 *
 * @param volt_reg The voltage register to read
 * @param temp_reg The temperature register to read
 */
typedef struct {
    BmsManagerVoltageRegister volt_reg;
    BmsManagerTemperatureRegister temp_reg;
} _BmsMonitorFsmHandler;
/*** USER CODE END TYPES ***/

// Functions to check and trigger an event
bool bms_monitor_fsm_is_event_triggered();
void bms_monitor_fsm_event_trigger(bms_monitor_fsm_event_data_t *event);

// State functions

// Function to be executed in state init
// valid return states: BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_init(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state write_configuration
// valid return states: BMS_MONITOR_FSM_STATE_READ_CONFIGURATION, BMS_MONITOR_FSM_STATE_START_VOLT_CONVERSION, BMS_MONITOR_FSM_STATE_START_TEMP_CONVERSION
bms_monitor_fsm_state_t bms_monitor_fsm_do_write_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_configuration
// valid return states: BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_START_VOLT_CONVERSION, BMS_MONITOR_FSM_STATE_START_TEMP_CONVERSION
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_volt_conversion
// valid return states: BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_POLL_VOLT_STATUS
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_volt_conversion(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_temp_conversion
// valid return states: BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_POLL_TEMP_STATUS
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_temp_conversion(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state poll_volt_status
// valid return states: BMS_MONITOR_FSM_NO_CHANGE, BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_POLL_VOLT_STATUS, BMS_MONITOR_FSM_STATE_READ_VOLTAGE
bms_monitor_fsm_state_t bms_monitor_fsm_do_poll_volt_status(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_voltage
// valid return states: BMS_MONITOR_FSM_NO_CHANGE, BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_READ_VOLTAGE
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_voltage(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state poll_temp_status
// valid return states: BMS_MONITOR_FSM_NO_CHANGE, BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_POLL_TEMP_STATUS, BMS_MONITOR_FSM_STATE_READ_TEMPERATURE
bms_monitor_fsm_state_t bms_monitor_fsm_do_poll_temp_status(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_temperature
// valid return states: BMS_MONITOR_FSM_NO_CHANGE, BMS_MONITOR_FSM_STATE_WRITE_CONFIGURATION, BMS_MONITOR_FSM_STATE_READ_TEMPERATURE
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_temperature(bms_monitor_fsm_state_data_t *data);


// List of state functions
extern bms_monitor_fsm_state_func_t *const bms_monitor_fsm_state_table[BMS_MONITOR_FSM_NUM_STATES];


// No transition functions

// state manager
bms_monitor_fsm_state_t bms_monitor_fsm_run_state(bms_monitor_fsm_state_t cur_state, bms_monitor_fsm_state_data_t *data);

/*** USER CODE BEGIN FUNCTIONS ***/

/*** USER CODE END FUNCTIONS ***/

#endif
