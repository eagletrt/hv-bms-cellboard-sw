/******************************************************************************
Finite State Machine
Project: cellboard_bms_monitor_fsm
Description: Cellboard FSM that handles all the operations of the BMS monitor

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.5.4
Generation date: 2024-08-28 23:36:56 +0200
Generated from: bms-monitor-fsm.dot
The finite state machine has:
  29 states
  1 transition functions
Functions and types have been generated with prefix "bms_monitor_fsm_"
******************************************************************************/

#ifndef BMS_MONITOR_FSM_H
#define BMS_MONITOR_FSM_H
#include <stdlib.h>
#include <stdbool.h>

/*** USER CODE BEGIN MACROS ***/
#include "cellboard-def.h"
#include "cellboard-conf.h"

#include "bms-manager.h"
/*** USER CODE END MACROS ***/

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
/*** USER STATE DATA TYPE BEGIN ***/
typedef void bms_monitor_fsm_state_data_t;
/*** USER STATE DATA TYPE END ***/
// Event data object
// By default the struct is empty; put the data of the event inside
// the structure if you need or leave it empty
typedef struct {
  
  /*** USER CODE BEGIN EVENT_DATA ***/
  
  /*** USER CODE END EVENT_DATA ***/

} bms_monitor_fsm_event_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  BMS_MONITOR_FSM_STATE_INIT = 0,  
  BMS_MONITOR_FSM_STATE_START_VOLT_CONVERSION,  
  BMS_MONITOR_FSM_STATE_VOLT_WRITE_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_VOLT_READ_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_READ_VOLT_A,  
  BMS_MONITOR_FSM_STATE_READ_VOLT_B,  
  BMS_MONITOR_FSM_STATE_READ_VOLT_C,  
  BMS_MONITOR_FSM_STATE_READ_VOLT_D,  
  BMS_MONITOR_FSM_STATE_START_TEMP_CONVERSION,  
  BMS_MONITOR_FSM_STATE_TEMP_WRITE_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_TEMP_READ_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_READ_TEMP_A,  
  BMS_MONITOR_FSM_STATE_READ_TEMP_B,  
  BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUP_CONVERSION_FIRST,  
  BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUP_WRITE_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUP_CONVERSION_SECOND,  
  BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUP_READ_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_A,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_B,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_C,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_D,  
  BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUD_CONVERSION_FIRST,  
  BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUD_WRITE_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUD_CONVERSION_SECOND,  
  BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUD_READ_CONFIGURATION,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_A,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_B,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_C,  
  BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_D,  
  BMS_MONITOR_FSM_NUM_STATES,
  BMS_MONITOR_FSM_NO_CHANGE
} bms_monitor_fsm_state_t;

// State human-readable names
extern const char *bms_monitor_fsm_state_names[];

// State function and state transition prototypes
typedef bms_monitor_fsm_state_t bms_monitor_fsm_state_func_t(bms_monitor_fsm_state_data_t *data);
typedef void transition_func_t(bms_monitor_fsm_state_data_t *data);

/*** USER CODE BEGIN TYPES ***/
/**
 * @brief Type definition for the BMS monitor structure handler
 *
 * @attention This structure should not be used outside of this module
 *
 * @param fsm_state The current state of the FSM
 * @param volt_reg The voltage register to read
 * @param temp_reg The temperature register to read
 * @param open_wire_operations Current number of open wire operations
 */
typedef struct {
    bms_monitor_fsm_state_t fsm_state;
} _BmsMonitorFsmHandler;
/*** USER CODE END TYPES ***/

// Functions to check and trigger an event
bool bms_monitor_fsm_is_event_triggered();
void bms_monitor_fsm_event_trigger(bms_monitor_fsm_event_data_t *event);

// State functions

// Function to be executed in state init
// valid return states: BMS_MONITOR_FSM_STATE_START_VOLT_CONVERSION
bms_monitor_fsm_state_t bms_monitor_fsm_do_init(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_volt_conversion
// valid return states: BMS_MONITOR_FSM_STATE_VOLT_WRITE_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_volt_conversion(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state volt_write_configuration
// valid return states: BMS_MONITOR_FSM_STATE_VOLT_READ_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_volt_write_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state volt_read_configuration
// valid return states: BMS_MONITOR_FSM_STATE_READ_VOLT_A
bms_monitor_fsm_state_t bms_monitor_fsm_do_volt_read_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_volt_a
// valid return states: BMS_MONITOR_FSM_STATE_READ_VOLT_B
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_volt_a(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_volt_b
// valid return states: BMS_MONITOR_FSM_STATE_READ_VOLT_C
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_volt_b(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_volt_c
// valid return states: BMS_MONITOR_FSM_STATE_READ_VOLT_D
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_volt_c(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_volt_d
// valid return states: BMS_MONITOR_FSM_STATE_START_TEMP_CONVERSION
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_volt_d(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_temp_conversion
// valid return states: BMS_MONITOR_FSM_STATE_TEMP_WRITE_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_temp_conversion(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state temp_write_configuration
// valid return states: BMS_MONITOR_FSM_STATE_TEMP_READ_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_temp_write_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state temp_read_configuration
// valid return states: BMS_MONITOR_FSM_STATE_READ_TEMP_A
bms_monitor_fsm_state_t bms_monitor_fsm_do_temp_read_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_temp_a
// valid return states: BMS_MONITOR_FSM_STATE_READ_TEMP_B
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_temp_a(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_temp_b
// valid return states: BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUP_CONVERSION_FIRST
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_temp_b(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_open_wire_pup_conversion_first
// valid return states: BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUP_WRITE_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_open_wire_pup_conversion_first(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state open_wire_pup_write_configuration
// valid return states: BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUP_CONVERSION_SECOND
bms_monitor_fsm_state_t bms_monitor_fsm_do_open_wire_pup_write_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_open_wire_pup_conversion_second
// valid return states: BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUP_READ_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_open_wire_pup_conversion_second(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state open_wire_pup_read_configuration
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_A
bms_monitor_fsm_state_t bms_monitor_fsm_do_open_wire_pup_read_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pup_a
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_B
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pup_a(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pup_b
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_C
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pup_b(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pup_c
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUP_D
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pup_c(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pup_d
// valid return states: BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUD_CONVERSION_FIRST
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pup_d(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_open_wire_pud_conversion_first
// valid return states: BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUD_WRITE_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_open_wire_pud_conversion_first(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state open_wire_pud_write_configuration
// valid return states: BMS_MONITOR_FSM_STATE_START_OPEN_WIRE_PUD_CONVERSION_SECOND
bms_monitor_fsm_state_t bms_monitor_fsm_do_open_wire_pud_write_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state start_open_wire_pud_conversion_second
// valid return states: BMS_MONITOR_FSM_STATE_OPEN_WIRE_PUD_READ_CONFIGURATION
bms_monitor_fsm_state_t bms_monitor_fsm_do_start_open_wire_pud_conversion_second(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state open_wire_pud_read_configuration
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_A
bms_monitor_fsm_state_t bms_monitor_fsm_do_open_wire_pud_read_configuration(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pud_a
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_B
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pud_a(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pud_b
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_C
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pud_b(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pud_c
// valid return states: BMS_MONITOR_FSM_STATE_READ_OPEN_WIRE_PUD_D
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pud_c(bms_monitor_fsm_state_data_t *data);

// Function to be executed in state read_open_wire_pud_d
// valid return states: BMS_MONITOR_FSM_STATE_START_VOLT_CONVERSION
bms_monitor_fsm_state_t bms_monitor_fsm_do_read_open_wire_pud_d(bms_monitor_fsm_state_data_t *data);


// List of state functions
extern bms_monitor_fsm_state_func_t *const bms_monitor_fsm_state_table[BMS_MONITOR_FSM_NUM_STATES];


// Transition functions
void bms_monitor_fsm_check_open_wire(bms_monitor_fsm_state_data_t *data);

// Table of transition functions
extern transition_func_t *const bms_monitor_fsm_transition_table[BMS_MONITOR_FSM_NUM_STATES][BMS_MONITOR_FSM_NUM_STATES];

// state manager
bms_monitor_fsm_state_t bms_monitor_fsm_run_state(bms_monitor_fsm_state_t cur_state, bms_monitor_fsm_state_data_t *data);

/*** USER CODE BEGIN FUNCTIONS ***/
/**
 * @brief Get the current status of the FSM
 *
 * @return fsm_state_t The FSM status
 */
bms_monitor_fsm_state_t bms_monitor_fsm_get_state(void);
/*** USER CODE END FUNCTIONS ***/

#endif
